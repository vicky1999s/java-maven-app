pipeline{

    agent {
        label 'linux'
    }

    tools{
        maven 'maven-linux'
    }

    stages{

        stage('BUILD'){
            steps{
                echo "maven home: ${env.MAVEN_HOME}"
                sh 'mvn -DskipTests package'
                echo '=====build completed======='
            }
        }

        stage('TEST'){

            environment{
                MONTH = sh(returnStdout: true, script: 'date "+%m"').trim()
                YEAR = sh(returnStdout: true, script: 'date "+%Y"').trim()
                PROJECT_NAME = sh(returnStdout: true, script: 'mvn help:evaluate -Dexpression=project.name -q -DforceStdout').trim()
                PROJECT_VERSION = sh(returnStdout: true, script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout').trim()
                FILENAME = sh(returnStdout: true, script: "echo \"${PROJECT_NAME}-${PROJECT_VERSION}.jar\"").trim()
            }
            
            steps{
                sh 'mvn test'
            }

            post{
                always{
                    junit testResults: 'target/surefire-reports/*.xml'
                }

                success{
                    withAWS(credentials:'jenkins-controller'){
                        s3Upload(pathStyleAccessEnabled: true, payloadSigningEnabled: true, file:"target/${FILENAME}", bucket:'vickyjenkinstesting', path:"${YEAR}/${MONTH}")
                    }
                }
            }
        }

        // stage('DEPLOY'){
        //     steps{
        //         createDeployment(
        //                 s3Bucket: 'jenkins.bucket',
        //                 s3Key: 'artifacts/SimpleWebApp.zip',
        //                 s3BundleType: 'zip', // [Valid values: tar | tgz | zip | YAML | JSON]
        //                 applicationName: 'SampleWebApp',
        //                 deploymentGroupName: 'SampleDeploymentGroup',
        //                 deploymentConfigName: 'CodeDeployDefault.AllAtOnce',
        //                 description: 'Test deploy',
        //                 waitForCompletion: 'true',
        //                 //Optional values 
        //                 ignoreApplicationStopFailures: 'false',
        //                 fileExistsBehavior: 'OVERWRITE'// [Valid values: DISALLOW, OVERWRITE, RETAIN]
        //         )
        //     }
        // }
    }
}